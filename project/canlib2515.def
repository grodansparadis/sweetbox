/*********************************************************************
 *
 *                  CAN Lib MCP2515 def File
 *
 *********************************************************************
 * FileName:        canlib2515.def
 * Dependencies:	
 *
 * Processor:       PIC32
 *
 * Complier:        MPLAB C32 1.0+
 *                  MPLAB IDE 8.0+
 * Company:         Microchip Technology, Inc.
 *
 * Software License Agreement
 *
 * The software supplied herewith by Microchip Technology Incorporated
 * (the “Company”) for its PIC32/PIC24 Microcontroller is intended
 * and supplied to you, the Company’s customer, for use solely and
 * exclusively on Microchip PIC32/PIC24 Microcontroller products.
 * The software is owned by the Company and/or its supplier, and is
 * protected under applicable copyright laws. All rights are reserved.
 * Any use in violation of the foregoing restrictions may subject the
 * user to criminal sanctions under applicable laws, as well as to
 * civil liability for the breach of the terms and conditions of this
 * license.
 *
 * THIS SOFTWARE IS PROVIDED IN AN “AS IS” CONDITION. NO WARRANTIES,
 * WHETHER EXPRESS, IMPLIED OR STATUTORY, INCLUDING, BUT NOT LIMITED
 * TO, IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A
 * PARTICULAR PURPOSE APPLY TO THIS SOFTWARE. THE COMPANY SHALL NOT,
 * IN ANY CIRCUMSTANCES, BE LIABLE FOR SPECIAL, INCIDENTAL OR
 * CONSEQUENTIAL DAMAGES, FOR ANY REASON WHATSOEVER.
 *
 *
 * $Id: $
 *
 ********************************************************************/
 

// Transmit buffer timeout
#define XMIT_TIMEOUT 100	// milli sec

// CAN Chip Select port configuration
#define mSetupCANCSDirection() 		(mPORTESetBits( BIT_0 ), mPORTESetPinsDigitalOut( BIT_0 ))

// CAN Chip Reset port configuration
#define mSetupCANResetDirection() 	(mPORTESetBits( BIT_1 ), mPORTESetPinsDigitalOut( BIT_1 ))

// Chip Select lines for CAN controller.  Channel is 1 based for SPI ports
#define mSetCanCSOn(Chn)			(Chn==1)?(mPORTEClearBits( BIT_0 )):(mPORTEClearBits( BIT_0 ))
#define mSetCanCSOff(Chn)			(Chn==1)?(mPORTESetBits( BIT_0 ))  :(mPORTESetBits( BIT_0 ))

// Chip Select lines for CAN controller.  
#define mSetCanResetOn( chn )		(chn==1)?(mPORTEClearBits( BIT_1 )):(mPORTEClearBits( BIT_1 ))
#define mSetCanResetOff( chn )		(chn==1)?(mPORTESetBits( BIT_1 ))  :(mPORTESetBits( BIT_1 ))

// Baudrate setting in CNF1 based on 16 MHz crystal
#define CAN_500kbps 	1       
#define CAN_250kbps 	3
#define CAN_125kbps 	7       

